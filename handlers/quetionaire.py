import datetime

from aiogram import Router
from aiogram.types import ReplyKeyboardRemove
from utils.states import *
from keyboards.keyboards import *
from model_db import *
from aiogram.fsm.context import FSMContext

router = Router()


@router.message(Create.photos_ids)
async def create_photos_ids(message: Message, state: FSMContext):
    if message.text:
        if message.text.lower() == '–¥–∞–ª—å—à–µ':
            data = await state.get_data()

            was_photos = False
            for key in data.keys():
                if key == 'photos_ids':
                    was_photos = True
            if not was_photos:
                await message.answer(f"–¢—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–∏ –µ–¥–∏–Ω–æ–≥–æ —Ñ–æ—Ç–æ!")
                return
            else:
                await state.set_state(Create.quantity_of_topics)
                await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –±—É–¥–µ—Ç.\n"
                                     f"\n"
                                     f"<i>–û–±—ã—á–Ω–æ —ç—Ç–æ 30 </i>ü§®\n"
                                     f"<b>–í–æ–ø—Ä–æ—Å 2/3</b>", reply_markup=ReplyKeyboardRemove())
        else:
            await message.answer(f"üôÑ")
            return
    if not message.photo and not message.text:
        await message.answer(f"–¢–∞–∫ –¥–µ–ª–æ –Ω–µ –∏–¥–µ—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π")
        return
    else:
        data = await state.get_data()

        was_photos = False
        for key in data.keys():
            if key == 'photos_ids':
                was_photos = True

        await message.bot.download(file=message.photo[-1].file_id, destination=f'photos/{message.photo[-1].file_id}.jpg')
        if was_photos:
            photos_ids = data['photos_ids']
            photos_ids.append(message.photo[-1].file_id)
        else:
            photos_ids = [message.photo[-1].file_id]
        await state.update_data(photos_ids=photos_ids)


@router.message(Create.quantity_of_topics)
async def select_quantity_of_topics(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(f"–°–∫–∏–Ω—å —Ü–∏—Ñ–æ—Ä–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–æü•∫")
        return
    else:
        try:
            quantity = int(message.text)
        except ValueError:
            await message.answer(f"–°–∫–∏–Ω—å —Ü–∏—Ñ–æ—Ä–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ü§†")
            return
        await message.answer(f"–¢–∞–∫-—Å...")

    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª. –ò–¥–µ–º –¥–∞–ª—å—à–µ")
    await state.update_data(quantity_of_topics=quantity)
    await state.set_state(Create.people_for_topic)

    await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –æ–¥–Ω—É —Ç–µ–º—É.\n"
                         f"\n"
                         f"<i>–û–±—ã—á–Ω–æ —ç—Ç–æ 1 </i>ü§®\n"
                         f"<b>–í–æ–ø—Ä–æ—Å 3/3</b>")


@router.message(Create.people_for_topic)
async def select_people_for_topic(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(f"–°–∫–∏–Ω—å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–æüò¢")
        return
    else:
        try:
            people_for_topic = int(message.text)
        except ValueError:
            await message.answer(f"–°–∫–∏–Ω—å —Ü–∏—Ñ–æ—Ä–∫–æ–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞üòß")
            return
        await message.answer(f"–ó–Ω–∞—á–∏—Ç-—Å—è, –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª–∏.")

    await state.update_data(people_for_topic=people_for_topic)
    await state.set_state(Create.okay_bro_yeah_mazafaka)
    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ \"–æ—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–Ω—å\"?", reply_markup=yes_or_no_keyboard)


@router.message(Create.okay_bro_yeah_mazafaka)
async def confidence(message: Message, state: FSMContext):
    if message.text.lower() == '–¥–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω—å':
        data = await state.get_data()

        with db:
            booking = Booking.create(time_of_creation=datetime.datetime.now(), telegram_id=message.from_user.id,
                                     times_can_choose=data['people_for_topic'])
            for photo_id in data['photos_ids']:
                Photos.create(photo_id=photo_id, booking_id=booking.id)
            for topic in range(data['quantity_of_topics']):
                TopicList.create(time_of_creation=datetime.datetime.now(),
                                 booking_id=booking.id, topic_in_booking_id=topic+1)
        await message.answer('–°–æ–∑–¥–∞–Ω–æ!', reply_markup=ReplyKeyboardRemove())

        # –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ

    elif message.text.lower() == '–Ω–µ—Ç, —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É':
        await message.answer('–ù—É –∏ –∏–¥–∏ –Ω–∞—Ö—É–π —Ç–æ–≥–¥–∞', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('üòê')
    await state.clear()
