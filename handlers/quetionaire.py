import asyncio
import datetime

from aiogram import Router
from aiogram.types import ReplyKeyboardRemove, input_file
from aiogram.utils import media_group
from utils.states import *
from handlers import builders
from keyboards.keyboards import *
from model_db import *
from aiogram.fsm.context import FSMContext

router = Router()
id_broadcast = -4231935078


@router.message(Create.photos_ids)
async def create_photos_ids(message: Message, state: FSMContext, album=None):

    if not message.photo and not message.text:
        await message.answer(f"–¢–∞–∫ –¥–µ–ª–æ –Ω–µ –∏–¥–µ—Ç, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–π")
        return
    else:
        photos_ids = []

        if album:
            messages = album
        else:
            messages = [message]
        for element_message in messages:
            await message.bot.download(file=element_message.photo[-1].file_id,
                                       destination=f'photos/{element_message.photo[-1].file_id}.jpg')
            photos_ids.append(element_message.photo[-1].file_id)

        await state.update_data(photos_ids=photos_ids)
        await state.set_state(Create.quantity_of_topics)
        await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –±—É–¥–µ—Ç.\n"
                             f"\n"
                             f"<i>–û–±—ã—á–Ω–æ —ç—Ç–æ 30 </i>ü§®\n"
                             f"<b>–í–æ–ø—Ä–æ—Å 2/4</b>")


@router.message(Create.quantity_of_topics)
async def select_quantity_of_topics(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(f"–°–∫–∏–Ω—å —Ü–∏—Ñ–æ—Ä–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–æü•∫")
        return
    else:
        try:
            quantity = int(message.text)
        except ValueError:
            await message.answer(f"–°–∫–∏–Ω—å —Ü–∏—Ñ–æ—Ä–∫–æ–π –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–µ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞ü§†")
            return

    if quantity > 100:
        await message.answer(f"–ë–æ–ª—å—à–µ 100 –±—ã—Ç—å –Ω–µ –º–æ–∂–µ—Ç, –∏–∑–≤–∏–Ω–∏")
        return
    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª. –ò–¥–µ–º –¥–∞–ª—å—à–µ")
    await state.update_data(quantity_of_topics=quantity)
    await state.set_state(Create.people_for_topic)

    await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª—é–¥–µ–π –º–æ–∂–µ—Ç –∑–∞–Ω–∏–º–∞—Ç—å –æ–¥–Ω—É —Ç–µ–º—É.\n"
                         f"\n"
                         f"<i>–û–±—ã—á–Ω–æ —ç—Ç–æ 1 </i>ü§®\n"
                         f"<b>–í–æ–ø—Ä–æ—Å 3/4</b>")


@router.message(Create.people_for_topic)
async def select_people_for_topic(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(f"–°–∫–∏–Ω—å —Ç–µ–∫—Å—Ç–æ–º –ø–æ–∂–∞–ª—É–π—Å—Ç–æüò¢")
        return
    else:
        try:
            people_for_topic = int(message.text)
        except ValueError:
            await message.answer(f"–°–∫–∏–Ω—å —Ü–∏—Ñ–æ—Ä–∫–æ–π –ø–æ–∂–∞–ª—É–π—Å—Ç–∞–∞–∞–∞–∞–∞–∞–∞–∞–∞üòß")
            return

    await message.answer(f"–ó–∞–ø–∏—Å–∞–ª. –ò–¥–µ–º –¥–∞–ª—å—à–µ")
    await state.update_data(people_for_topic=people_for_topic)
    await state.set_state(Create.note)
    await message.answer(f"–ù–∞–ø–∏—à–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∫ –±—Ä–æ–Ω–∏. "
                         f"–≠—Ç–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—É–¥–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∞ —Å–Ω–∏–∑—É –∫–∞—Ä—Ç–∏–Ω–æ–∫.\n"
                         f"\n"
                         f"<i>–ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å </i>ü§®\n"
                         f"<b>–í–æ–ø—Ä–æ—Å 4/4</b>", reply_markup=next_keyboard)


@router.message(Create.note)
async def leave_note(message: Message, state: FSMContext):
    if not message.text:
        await message.answer(f"–°–∫–∏–Ω—å —Ç–µ–∫—Å—Ç–æ–º.")
        return

    if message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        note = ''
    else:
        note = '\n' + message.text
    await message.answer(f"–ó–Ω–∞—á–∏—Ç-—Å—è, –≤—Å–µ –∑–∞–ø–∏—Å–∞–ª–∏.")

    await state.update_data(note=note)
    await state.set_state(Create.okay_bro_yeah_mazafaka)

    await message.answer(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ \"–æ—Ç–∫—Ä—ã—Ç—å –±—Ä–æ–Ω—å\"?", reply_markup=yes_or_no_keyboard)


@router.message(Create.okay_bro_yeah_mazafaka)
async def confidence(message: Message, state: FSMContext):
    if message.text.lower() == '–¥–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –±—Ä–æ–Ω—å':
        data = await state.get_data()
        topic_ids = {}
        media = media_group.MediaGroupBuilder()

        with db:
            booking = Booking.create(time_of_creation=datetime.datetime.now(), telegram_id=message.from_user.id,
                                     times_can_choose=data['people_for_topic'])
            for photo_id in data['photos_ids']:
                Photos.create(photo_id=photo_id, booking_id=booking.id)
                media.add_photo(input_file.FSInputFile(f'photos/{photo_id}.jpg'))
            for topic in range(data['quantity_of_topics']):
                topics_db = TopicList.create(time_of_creation=datetime.datetime.now(),
                                 booking_id=booking.id, topic_in_booking_id=topic + 1)
                topic_ids[topics_db.id] = topic+1
        await message.answer('–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —á–∞—Ç —Ñ–æ—Ç–∫–∏...')
        await message.bot.send_media_group(id_broadcast, media.build())

        await message.bot.send_message(id_broadcast, '–î–æ–±—Ä–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ —Å—É—Ç–æ–∫, –º–æ–∏ –ª—é–±–∏–º–∫–∏!\n'
                                                     f'–†–∞–∑–±–∏—Ä–∞–µ–º —Ç–µ–º–∫–∏! 1 —Ç–µ–º–∞ = '
                                                     f"<b>{data['people_for_topic']}</b> —á–µ–ª–æ–≤–µ–∫(–∞)"
                                                     f"{data['note']}\n\n"
                                                     f'<tg-spoiler>–°–∫–∞–∂–µ–º –±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ<a href="tg://user?id=1027005788"> '
                                                     f'–ê–ª–µ–∫—Å–∞–Ω–¥—Ä—É –í–∏–∫—Ç–æ—Ä–æ–≤–∏—á—É</a> –∑–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –±–æ—Ç–∞‚ù§</tg-spoiler>',
                                      reply_markup=builders.create_keyboard(booking.id, topic_ids))

        await message.answer('–°–æ–∑–¥–∞–Ω–æ!', reply_markup=ReplyKeyboardRemove())

    elif message.text.lower() == '–Ω–µ—Ç, —Å–±—Ä–æ—Å–∏—Ç—å —Ñ–æ—Ä–º—É':
        await message.answer('–ù—É –∏ –∏–¥–∏ –Ω–∞—Ö—É–π —Ç–æ–≥–¥–∞', reply_markup=ReplyKeyboardRemove())
    else:
        await message.answer('üòê')
    await state.clear()
